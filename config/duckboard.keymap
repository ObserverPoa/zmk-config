/* Copyright (c) 2020 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 *
 * Author: Edited from Jack Hartstein
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/led/led.h>

#define CALC 0
#define APPS 1
#define RGB_BT 2
#define GAME 3

#define TIMEOUT 200

/ {

    behaviors {
      td0: tap_dance_0 {
          compatible = "zmk,behavior-tap-dance";
          label = "TAP_DANCE_0";
          #binding-cells = <0>;
          tapping-term-ms = <200>;
          bindings = <&to CALC>, <&to APPS>, <&to GAME>;
      };

      td_lang: tap_dance_lang {
          compatible = "zmk,behavior-tap-dance";
          label = "TAP_DANCE_LANG";
          #binding-cells = <0>;
          tapping-term-ms = <500>;
          bindings = <&kp LC(LS(NUMBER_1))>, <&kp LC(LS(N2))>, <&kp LC(LS(N3))>;
      };

      qts:quotes {
          compatible = "zmk,behavior-hold-tap";
          label = "QUOTATION_MARKS";
          #binding-cells = <2>;
          flavor = "hold-preferred";
          tapping-term-ms = <200>;
          bindings = <&dqts>, <&sqts>;
      };

  };

    macros {
            triple_zero: triple_zero {
                label = "triple_zero";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                wait-ms = <40>;
                tap-ms = <40>;
                bindings = <&kp NUMBER_0 &kp NUMBER_0 &kp NUMBER_0>;
            };

            prts: parentheses {
                label = "PARENTHESES";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                wait-ms = <40>;
                tap-ms = <40>;
                bindings
                      = <&kp LPAR &kp RPAR>
                      , <&kp LEFT>;
            };

            dqts: double_quotes {
                label = "DOUBLE_QUOTES";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                wait-ms = <40>;
                tap-ms = <40>;
                bindings
                      = <&kp DQT &kp DQT>
                      , <&kp LEFT>;
            };

            sqts: single_quotes {
                label = "SINGLE_QUOTES";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                wait-ms = <40>;
                tap-ms = <40>;
                bindings
                      = <&kp SQT &kp SQT>
                      , <&kp LEFT>;
            };
        };

    combos {
        compatible = "zmk,combos";
        combo_bootloader {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 4>;
            bindings = <&bootloader>;
        };
        combo_reset {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 3>;
            bindings = <&reset>;
        };

        combo_btnxt {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 6>;
            bindings = <&bt BT_NXT>;
            layers = <2>;
        };
        combo_btprv {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 7>;
            bindings = <&bt BT_PRV>;
            layers = <2>;
        };
        combo_btclr {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 8>;
            bindings = <&bt BT_CLR>;
            layers = <2>;
        };

        combo_prtsc {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 11>;
            bindings = <&kp PRINTSCREEN>;
            layers = <1>;
        };
        combo_pause {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 13>;
            bindings = <&kp PAUSE_BREAK>;
            layers = <1>;
        };

        combo_layer0 {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 16>;
            bindings = <&to CALC>;
        };
        combo_layer1 {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 17>;
            bindings = <&to APPS>;
        };
        combo_layer2 {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 18>;
            bindings = <&to RGB_BT>;
        };

        combo_rgb {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 21>;
            bindings = <&rgb_ug RGB_TOG>;
        };

        combo_JPKey {
            timeout-ms = <TIMEOUT>;
            key-positions = <11 13>;
            bindings = <&kp LANG_ZENKAKUHANKAKU>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        calc_layer {
            bindings = <
                &none           &to CALC       &kp ASTERISK   &kp SLASH       &kp ESC
                &none           &kp NUMBER_7   &kp NUMBER_8   &kp NUMBER_9    &kp PLUS
                &none           &kp NUMBER_4   &kp NUMBER_5   &kp NUMBER_6    &kp MINUS
                &kp C_MUTE      &kp NUMBER_1   &kp NUMBER_2   &kp NUMBER_3    &kp ENTER
                &td0            &kp NUMBER_0   &triple_zero   &mt KP_COMMA KP_DOT     &kp ENTER
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        apps_layer {
            bindings = <
               &none            &trans           &kp F13          &kp F14          &kp F15
               &none            &kp F16          &kp F17          &kp K_CALC       &kp K_UNDO
               &none            &td_lang         &kp LC(LS(NUMBER_2))   &mt LANG_ZENKAKUHANKAKU LC(LS(NUMBER_3))   &kp ENTER
               &kp C_MUTE       &prts            &qts 0 0         &kp LG(LS(RIGHT))  &kp K_REDO
               &trans           &kp LC(X)        &kp LC(C)        &kp LC(V)        &none
           >;

           sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        rgb_bt_layer {
             bindings = <
                &none              &trans           &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &rgb_ug RGB_SPI
                &none              &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPD
                &none              &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD
                &ext_power EP_TOG  &none            &none            &none            &none
                &trans             &none            &none            &none            &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
         };


         game_layer {
             bindings = <
                &none           &trans           &kp F13          &kp F14          &kp F15
                &none           &kp KP_N7        &kp KP_N8        &kp KP_N9        &kp LC(PG_UP)
                &none           &kp KP_N4        &kp KP_N5        &kp KP_N6        &kp LC(PG_DN)
                &kp C_MUTE      &kp KP_N1        &kp KP_N2        &kp KP_N3        &kp LC(LS(ENTER))
                &trans          &kp KP_N0        &kp KP_N0        &kp DOT          &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
         };

    };
};
